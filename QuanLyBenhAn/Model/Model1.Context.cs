//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyBenhAn.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuanLiHoSoBenhAnNgoaiTruEntities : DbContext
    {
        public QuanLiHoSoBenhAnNgoaiTruEntities()
            : base("name=QuanLiHoSoBenhAnNgoaiTruEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Examination> Examination { get; set; }
        public virtual DbSet<Medicine> Medicine { get; set; }
        public virtual DbSet<Patient> Patient { get; set; }
        public virtual DbSet<Pay> Pay { get; set; }
        public virtual DbSet<People> People { get; set; }
        public virtual DbSet<Pre_Medicines> Pre_Medicines { get; set; }
        public virtual DbSet<Prescription> Prescription { get; set; }
        public virtual DbSet<Receipt> Receipt { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<usingService> usingService { get; set; }
        public virtual DbSet<basicInfo_patient> basicInfo_patient { get; set; }
        public virtual DbSet<Examination_view> Examination_view { get; set; }
        public virtual DbSet<info_Doctor> info_Doctor { get; set; }
        public virtual DbSet<info_Employee> info_Employee { get; set; }
        public virtual DbSet<medicalRecord> medicalRecord { get; set; }
        public virtual DbSet<Medicines_view> Medicines_view { get; set; }
        public virtual DbSet<pay_view> pay_view { get; set; }
        public virtual DbSet<Prescription_Medicines> Prescription_Medicines { get; set; }
        public virtual DbSet<Receipt_view> Receipt_view { get; set; }
    
        [DbFunction("QuanLiHoSoBenhAnNgoaiTruEntities", "func_ListMedicine_patient_Day")]
        public virtual IQueryable<func_ListMedicine_patient_Day_Result> func_ListMedicine_patient_Day(string patientID, Nullable<System.DateTime> day)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_ListMedicine_patient_Day_Result>("[QuanLiHoSoBenhAnNgoaiTruEntities].[func_ListMedicine_patient_Day](@patientID, @day)", patientIDParameter, dayParameter);
        }
    
        [DbFunction("QuanLiHoSoBenhAnNgoaiTruEntities", "func_UsingService")]
        public virtual IQueryable<func_UsingService_Result> func_UsingService(string patientID, Nullable<System.DateTime> dateUse)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var dateUseParameter = dateUse.HasValue ?
                new ObjectParameter("dateUse", dateUse) :
                new ObjectParameter("dateUse", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_UsingService_Result>("[QuanLiHoSoBenhAnNgoaiTruEntities].[func_UsingService](@patientID, @dateUse)", patientIDParameter, dateUseParameter);
        }
    
        public virtual int InsertEmployee(string employeeFirstName, string employeeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string position)
        {
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("employeeFirstName", employeeFirstName) :
                new ObjectParameter("employeeFirstName", typeof(string));
    
            var employeeLastnameParameter = employeeLastname != null ?
                new ObjectParameter("employeeLastname", employeeLastname) :
                new ObjectParameter("employeeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", employeeFirstNameParameter, employeeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, positionParameter);
        }
    
        public virtual int InsertPatient(string patientFirstName, string patientLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientJob, string healthInsurance_, string reason)
        {
            var patientFirstNameParameter = patientFirstName != null ?
                new ObjectParameter("patientFirstName", patientFirstName) :
                new ObjectParameter("patientFirstName", typeof(string));
    
            var patientLastnameParameter = patientLastname != null ?
                new ObjectParameter("patientLastname", patientLastname) :
                new ObjectParameter("patientLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientJobParameter = patientJob != null ?
                new ObjectParameter("patientJob", patientJob) :
                new ObjectParameter("patientJob", typeof(string));
    
            var healthInsurance_Parameter = healthInsurance_ != null ?
                new ObjectParameter("healthInsurance_", healthInsurance_) :
                new ObjectParameter("healthInsurance_", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", patientFirstNameParameter, patientLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientJobParameter, healthInsurance_Parameter, reasonParameter);
        }
    
        public virtual int InsertRelative(string relativeFirstName, string relativeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientID)
        {
            var relativeFirstNameParameter = relativeFirstName != null ?
                new ObjectParameter("relativeFirstName", relativeFirstName) :
                new ObjectParameter("relativeFirstName", typeof(string));
    
            var relativeLastnameParameter = relativeLastname != null ?
                new ObjectParameter("relativeLastname", relativeLastname) :
                new ObjectParameter("relativeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRelative", relativeFirstNameParameter, relativeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientIDParameter);
        }
    
        public virtual int UpdateEmployee(string employeeFirstName, string employeeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string position, string peopleID)
        {
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("employeeFirstName", employeeFirstName) :
                new ObjectParameter("employeeFirstName", typeof(string));
    
            var employeeLastnameParameter = employeeLastname != null ?
                new ObjectParameter("employeeLastname", employeeLastname) :
                new ObjectParameter("employeeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var peopleIDParameter = peopleID != null ?
                new ObjectParameter("peopleID", peopleID) :
                new ObjectParameter("peopleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", employeeFirstNameParameter, employeeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, positionParameter, peopleIDParameter);
        }
    
        public virtual int UpdatePatient(string patientFirstName, string patientLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientJob, string healthInsurance_, string reason, string peopleID)
        {
            var patientFirstNameParameter = patientFirstName != null ?
                new ObjectParameter("patientFirstName", patientFirstName) :
                new ObjectParameter("patientFirstName", typeof(string));
    
            var patientLastnameParameter = patientLastname != null ?
                new ObjectParameter("patientLastname", patientLastname) :
                new ObjectParameter("patientLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientJobParameter = patientJob != null ?
                new ObjectParameter("patientJob", patientJob) :
                new ObjectParameter("patientJob", typeof(string));
    
            var healthInsurance_Parameter = healthInsurance_ != null ?
                new ObjectParameter("healthInsurance_", healthInsurance_) :
                new ObjectParameter("healthInsurance_", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var peopleIDParameter = peopleID != null ?
                new ObjectParameter("peopleID", peopleID) :
                new ObjectParameter("peopleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", patientFirstNameParameter, patientLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientJobParameter, healthInsurance_Parameter, reasonParameter, peopleIDParameter);
        }
    
        public virtual int UpdateRelative(string relativeFirstName, string relativeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientID, string relativeID)
        {
            var relativeFirstNameParameter = relativeFirstName != null ?
                new ObjectParameter("relativeFirstName", relativeFirstName) :
                new ObjectParameter("relativeFirstName", typeof(string));
    
            var relativeLastnameParameter = relativeLastname != null ?
                new ObjectParameter("relativeLastname", relativeLastname) :
                new ObjectParameter("relativeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var relativeIDParameter = relativeID != null ?
                new ObjectParameter("relativeID", relativeID) :
                new ObjectParameter("relativeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRelative", relativeFirstNameParameter, relativeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientIDParameter, relativeIDParameter);
        }
    }
}
